from pathlib import Path
from textwrap import dedent

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ main.py —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
main_py_code = dedent("""
    from aiogram import Bot, Dispatcher, executor, types
    import logging
    import re
    from aiogram.utils.markdown import escape_md

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    API_TOKEN = "7680517671:AAHRTvxhvuvlEctp8j55KTpxZX_y47SlBGM"
    ADMIN_CHAT_ID = 220564316
    VIDEO_PLATFORMS = r"(youtu\\.be|youtube\\.com|vk\\.com|disk\\.yandex\\.ru|drive\\.google\\.com)"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(bot)
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    user_data = {}

    def is_valid_video_link(url: str) -> bool:
        return re.search(VIDEO_PLATFORMS, url) is not None

    @dp.message_handler(commands=["start"])
    async def start_cmd(message: types.Message):
        user_data[message.from_user.id] = {}
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("Mini", "Full", "Pro", "Ultra")
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç PlayDNA.\\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=keyboard)
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")

    @dp.message_handler(commands=["get_id"])
    async def get_id(message: types.Message):
        await message.answer(f"üÜî –í–∞—à ID: `{message.from_user.id}`\\nüë§ Username: @{message.from_user.username}", parse_mode="Markdown")

    @dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("format"))
    async def get_format(message: types.Message):
        user_data[message.from_user.id]["format"] = message.text.strip()
        await message.answer("üìé –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, VK, Google –î–∏—Å–∫):", reply_markup=types.ReplyKeyboardRemove())

    @dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("video"))
    async def get_video(message: types.Message):
        video_link = message.text.strip()
        if not is_valid_video_link(video_link):
            await message.answer("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YouTube, VK –∏–ª–∏ Google –î–∏—Å–∫.")
            return
        user_data[message.from_user.id]["video"] = video_link
        await message.answer("üéΩ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞, —Ü–≤–µ—Ç —Ñ–æ—Ä–º—ã –∏ –ø–æ–∑–∏—Ü–∏—é:")

    @dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("player_info"))
    async def get_player_info(message: types.Message):
        user_data[message.from_user.id]["player_info"] = message.text.strip()
        await message.answer("üìû –¢–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")

    @dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("contact"))
    async def get_contact(message: types.Message):
        try:
            user = message.from_user
            data = user_data[user.id]
            data["contact"] = message.text.strip()

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            format_ = escape_md(data["format"])
            video = escape_md(data["video"])
            player_info = escape_md(data["player_info"])
            contact = escape_md(data["contact"])
            username = escape_md(f"@{user.username}" if user.username else "‚Äî")
            user_id = user.id
            name = escape_md(user.full_name)

            admin_msg = (
                "üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\\n"
                f"üîπ –§–æ—Ä–º–∞—Ç: {format_}\\n"
                f"üîó –í–∏–¥–µ–æ: {video}\\n"
                f"üéΩ –ò–≥—Ä–æ–∫: {player_info}\\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\\n\\n"
                f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {username}\\n"
                f"üÜî ID: `{user_id}`\\n"
                f"üè∑ –ò–º—è: {name}"
            )

            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_msg, parse_mode="Markdown")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("/start")
            await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É?", reply_markup=keyboard)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            user_data.pop(user.id, None)

    if __name__ == "__main__":
        executor.start_polling(dp, skip_updates=True)
""")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
output_path = Path("/mnt/data/main.py")
output_path.write_text(main_py_code, encoding="utf-8")
output_path.name
