from pathlib import Path

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ main.py —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ø—Ä–∞–≤–æ–∫
main_py_code = '''from aiogram import Bot, Dispatcher, executor, types
import logging
import re

API_TOKEN = "7680517671:AAHRTvxhvuvlEctp8j55KTpxZX_y47SlBGM"
ADMIN_CHAT_ID = 220564316  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (gyrenkov)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_data = {}

def is_valid_video_link(text):
    return any(x in text.lower() for x in ["youtu", "vk.com", "disk.yandex", "drive.google"])

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_data[message.from_user.id] = {}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("Mini", "Full", "Pro", "Ultra")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç PlayDNA.\\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=keyboard)
    logging.info(f"Start command received from {message.from_user.id}")

@dp.message_handler(commands=["get_id"])
async def get_id(message: types.Message):
    await message.answer(f"üÜî –í–∞—à ID: `{message.from_user.id}`\\nüë§ Username: @{message.from_user.username}", parse_mode="Markdown")

@dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("format"))
async def get_format(message: types.Message):
    user_data[message.from_user.id]["format"] = message.text.strip()
    await message.answer("üìé –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, VK, Google –î–∏—Å–∫):", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("video"))
async def get_video(message: types.Message):
    video_link = message.text.strip()
    if not is_valid_video_link(video_link):
        await message.answer("üö´ –°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, VK –∏–ª–∏ Google –î–∏—Å–∫.")
        return
    user_data[message.from_user.id]["video"] = video_link
    await message.answer("üéΩ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞, —Ü–≤–µ—Ç —Ñ–æ—Ä–º—ã –∏ –ø–æ–∑–∏—Ü–∏—é:")

@dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("player_info"))
async def get_player_info(message: types.Message):
    user_data[message.from_user.id]["player_info"] = message.text.strip()
    await message.answer("üìû –¢–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message_handler(lambda m: m.from_user.id in user_data and not user_data[m.from_user.id].get("contact"))
async def get_contact(message: types.Message):
    contact = message.text.strip()
    user_data[message.from_user.id]["contact"] = contact
    data = user_data[message.from_user.id]
    user = message.from_user

    admin_msg = (
        "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\\n"
        f"üîπ –§–æ—Ä–º–∞—Ç: {data['format']}\\n"
        f"üîó –í–∏–¥–µ–æ: {data['video']}\\n"
        f"üéΩ –ò–≥—Ä–æ–∫: {data['player_info']}\\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\\n\\n"
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{user.username or user.first_name}\\n"
        f"üÜî ID: {user.id}\\n"
        f"üè∑ –ò–º—è: {user.full_name}"
    )

    try:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_msg, parse_mode=None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("/start")
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º.\\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É?", reply_markup=keyboard)
    user_data.pop(message.from_user.id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
'''

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª main.py
output_path = Path("/mnt/data/main.py")
output_path.write_text(main_py_code, encoding="utf-8")
output_path

