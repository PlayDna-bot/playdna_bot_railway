from pathlib import Path

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç Telegram-–±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
# –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–º–µ–Ω–æ–π –∑–∞—è–≤–∫–∏
main_py_code = """
from aiogram import Bot, Dispatcher, executor, types
import logging
import re
from aiogram.utils.markdown import escape_md

API_TOKEN = "7680517671:AAHRTvxhvuvlEctp8j55KTpxZX_y47SlBGM"
ADMIN_CHAT_ID = 220564316
VIDEO_PLATFORMS = r"(youtu\\.be|youtube\\.com|vk\\.com|disk\\.yandex\\.ru|drive\\.google\\.com)"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

user_data = {}
steps = ["format", "video", "player_info", "contact"]

def is_valid_video_link(url: str) -> bool:
    return re.search(VIDEO_PLATFORMS, url, re.IGNORECASE) is not None

def is_valid_phone(phone: str) -> bool:
    return re.fullmatch(r"\\+?\\d{10,15}", phone.replace(" ", "")) is not None

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_data[message.from_user.id] = {"step": 0}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("Mini", "Full", "Pro", "Ultra")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç PlayDNA.\\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=keyboard)

@dp.message_handler(commands=["back"])
async def go_back(message: types.Message):
    uid = message.from_user.id
    if uid in user_data and user_data[uid]["step"] > 0:
        user_data[uid]["step"] -= 1
        await proceed_step(message)

@dp.message_handler()
async def handle_all(message: types.Message):
    uid = message.from_user.id
    if uid not in user_data:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    step = user_data[uid]["step"]
    current = steps[step]

    if message.text.lower() in ["–Ω–µ—Ç", "no", "–Ω–µ –Ω–∞–¥–æ", "cancel"]:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.")
        user_data.pop(uid, None)
        return

    if current == "format":
        user_data[uid]["format"] = message.text.strip()
    elif current == "video":
        link = message.text.strip()
        if not is_valid_video_link(link):
            await message.answer("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YouTube, VK –∏–ª–∏ Google –î–∏—Å–∫.")
            return
        user_data[uid]["video"] = link
    elif current == "player_info":
        user_data[uid]["player_info"] = message.text.strip()
    elif current == "contact":
        contact = message.text.strip()
        if not is_valid_phone(contact) and not contact.startswith("@"):
            await message.answer("üìµ –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username.")
            return
        user_data[uid]["contact"] = contact

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
        data = user_data[uid]
        user = message.from_user
        text = (
            "üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\\n"
            f"üîπ –§–æ—Ä–º–∞—Ç: {escape_md(data['format'])}\\n"
            f"üîó –í–∏–¥–µ–æ: {escape_md(data['video'])}\\n"
            f"üéΩ –ò–≥—Ä–æ–∫: {escape_md(data['player_info'])}\\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escape_md(data['contact'])}\\n\\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{user.username or '‚Äî'}\\n"
            f"üÜî ID: `{user.id}`\\n"
            f"üè∑ –ò–º—è: {escape_md(user.full_name)}"
        )
        await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("/start")
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É?", reply_markup=keyboard)
        user_data.pop(uid, None)
        return

    user_data[uid]["step"] += 1
    await proceed_step(message)

async def proceed_step(message: types.Message):
    uid = message.from_user.id
    step = user_data[uid]["step"]
    prompts = [
        "üìé –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, VK, Google –î–∏—Å–∫):",
        "üéΩ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞, —Ü–≤–µ—Ç —Ñ–æ—Ä–º—ã –∏ –ø–æ–∑–∏—Ü–∏—é:",
        "üìû –¢–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:"
    ]
    if step == 1:
        await message.answer(prompts[0], reply_markup=types.ReplyKeyboardRemove())
    elif step == 2:
        await message.answer(prompts[1])
    elif step == 3:
        await message.answer(prompts[2])
"""

output_path = Path("/mnt/data/main.py")
output_path.write_text(main_py_code, encoding="utf-8")
output_path.name

